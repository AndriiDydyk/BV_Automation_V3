{
  "stats": {
    "suites": 12,
    "tests": 23,
    "passes": 22,
    "pending": 0,
    "failures": 1,
    "start": "2024-04-06T19:07:56.052Z",
    "end": "2024-04-06T19:08:08.513Z",
    "duration": 12461,
    "testsRegistered": 23,
    "passPercent": 95.65217391304348,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "58047827-cb08-4fbf-9ffb-df864d0f60b1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "22f28a95-04d0-4110-b848-1d3af1e93a7a",
          "title": "Авторизація",
          "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
          "file": "/tests/auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Авторизація\"",
              "fullTitle": "Авторизація \"before all\" hook in \"Авторизація\"",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "clientPrivateKey = await worker.getSessionValue('clientPrivateKey')\nclientPublicKey = await worker.getSessionValue('clientPublicKey')\ndevice = await worker.getSessionValue('iosReleaseDevice')\n// device = await worker.getSessionValue('iosDebugDevice')",
              "err": {},
              "uuid": "28eb661e-09b8-4d10-ab9c-66bb8bee97ed",
              "parentUUID": "22f28a95-04d0-4110-b848-1d3af1e93a7a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7464a718-109c-40c8-be77-0a86bf6f94bb",
              "title": "POST /start",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /start\"",
                  "fullTitle": "Авторизація POST /start \"before all\" hook in \"POST /start\"",
                  "timedOut": false,
                  "duration": 362,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await request(baseUrl).post('/auth/v3/start').send({\n  clientPublicKey,\n  phoneNumber,\n  device\n})\nconst token = response.body.token\nconst serverPublicKey = response.body.serverPublicKey\nconst cryptogram = response.body.cryptogram\nawait worker.setSessionValue('token', token)\nawait worker.setSessionValue('serverPublicKey', serverPublicKey)\nawait worker.setSessionValue('cryptogram', cryptogram)",
                  "err": {},
                  "uuid": "3e2e9b74-f897-461f-9368-337ec8c26124",
                  "parentUUID": "7464a718-109c-40c8-be77-0a86bf6f94bb",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Авторизація POST /start should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "883a00d7-d127-4ec6-be51-eb2ff88b2a67",
                  "parentUUID": "7464a718-109c-40c8-be77-0a86bf6f94bb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Авторизація POST /start should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const schema = {\n  type: 'object',\n  properties: {\n    serverPublicKey: { type: 'string' },\n    token: { type: 'string' },\n    sign: { type: 'string' },\n    cryptogram: { type: 'string' }\n  },\n  required: ['serverPublicKey', 'token', 'sign', 'cryptogram']\n}\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "131cf7d8-073f-4aa2-914c-769f12a1b811",
                  "parentUUID": "7464a718-109c-40c8-be77-0a86bf6f94bb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "883a00d7-d127-4ec6-be51-eb2ff88b2a67",
                "131cf7d8-073f-4aa2-914c-769f12a1b811"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8ce27774-6e25-45a9-968f-991b58ca9bc8",
              "title": "POST /nextStep",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /nextStep\"",
                  "fullTitle": "Авторизація POST /nextStep \"before all\" hook in \"POST /nextStep\"",
                  "timedOut": false,
                  "duration": 796,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const token = await worker.getSessionValue('token')\nconst cryptogram = await worker.getSessionValue('cryptogram')\nconst serverPublicKey = await worker.getSessionValue('serverPublicKey')\nconst challange = worker.decrypt(cryptogram, clientPrivateKey)\nconst encryptData = worker.encryptAndSign(\n  {\n    challengePass: challange\n  },\n  serverPublicKey,\n  clientPrivateKey\n)\nresponse = await request(baseUrl)\n  .post('/auth/v4/nextstep')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    sign: encryptData.sign,\n    cryptogram: encryptData.cryptogram\n  })\nawait worker.setSessionValue('cryptogram', response.body.cryptogram)\nawait worker.setSessionValue('nextStep', response.body.nextStep)",
                  "err": {},
                  "uuid": "8eb2bdc9-fa32-4255-93e1-aec31c87dc62",
                  "parentUUID": "8ce27774-6e25-45a9-968f-991b58ca9bc8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Авторизація POST /nextStep should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "909e895b-36ca-4128-b2c0-0c612e1c7ce0",
                  "parentUUID": "8ce27774-6e25-45a9-968f-991b58ca9bc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Авторизація POST /nextStep should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const schema = {\n  type: 'object',\n  properties: {\n    sign: { type: 'string' },\n    cryptogram: { type: 'string' }\n  },\n  required: ['sign', 'cryptogram']\n}\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "03594eff-8896-4742-8001-49d1f42a7617",
                  "parentUUID": "8ce27774-6e25-45a9-968f-991b58ca9bc8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "909e895b-36ca-4128-b2c0-0c612e1c7ce0",
                "03594eff-8896-4742-8001-49d1f42a7617"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fd82221c-6683-4abb-9f7a-22c3f67a7592",
              "title": "POST /otp/confirm",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /otp/confirm\"",
                  "fullTitle": "Авторизація POST /otp/confirm \"before all\" hook in \"POST /otp/confirm\"",
                  "timedOut": false,
                  "duration": 988,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nextStep = await worker.getSessionValue('nextStep')\nif (nextStep !== 'requestOtp') {\n  return\n}\nconst token = await worker.getSessionValue('token')\nconst cryptogram = await worker.getSessionValue('cryptogram')\nconst serverPublicKey = await worker.getSessionValue('serverPublicKey')\nconst challange = worker.decrypt(cryptogram, clientPrivateKey)\nconst encryptData = worker.encryptAndSign(\n  {\n    challengePass: challange,\n    otp\n  },\n  serverPublicKey,\n  clientPrivateKey\n)\nresponse = await request(baseUrl)\n  .post('/auth/v4/otp/confirm')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    sign: encryptData.sign,\n    cryptogram: encryptData.cryptogram\n  })\nawait worker.setSessionValue('cryptogram', response.body.cryptogram)\nawait worker.setSessionValue('nextStep', response.body.nextStep)",
                  "err": {},
                  "uuid": "115b561d-0847-4247-afc7-594c67e00585",
                  "parentUUID": "fd82221c-6683-4abb-9f7a-22c3f67a7592",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Авторизація POST /otp/confirm should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (!response) {\n  this.skip() // Пропустити виконання тесту\n}\nexpect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "8350a697-bd7c-4c63-aeae-b27fdcb97efd",
                  "parentUUID": "fd82221c-6683-4abb-9f7a-22c3f67a7592",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Авторизація POST /otp/confirm should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (!response) {\n  this.skip() // Пропустити виконання тесту\n}\nconst schema = {\n  type: 'object',\n  properties: {\n    sign: { type: 'string' },\n    cryptogram: { type: 'string' }\n  },\n  required: ['sign', 'cryptogram']\n}\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "f77aa077-2016-4a8e-8f56-ae34570dd76e",
                  "parentUUID": "fd82221c-6683-4abb-9f7a-22c3f67a7592",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8350a697-bd7c-4c63-aeae-b27fdcb97efd",
                "f77aa077-2016-4a8e-8f56-ae34570dd76e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8f283a39-ddf5-4c30-a790-ea29a6144fb4",
              "title": "POST /enterpassword",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /enterpassword\"",
                  "fullTitle": "Авторизація POST /enterpassword \"before all\" hook in \"POST /enterpassword\"",
                  "timedOut": false,
                  "duration": 389,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nextStep = await worker.getSessionValue('nextStep')\nif (nextStep !== 'enterPassword') {\n  return\n}\nconst token = await worker.getSessionValue('token')\nconst cryptogram = await worker.getSessionValue('cryptogram')\nconst serverPublicKey = await worker.getSessionValue('serverPublicKey')\nconst challange = worker.decrypt(cryptogram, clientPrivateKey)\nconst encryptData = worker.encryptAndSign(\n  {\n    challengePass: challange,\n    password\n  },\n  serverPublicKey,\n  clientPrivateKey\n)\nresponse = await request(baseUrl)\n  .post('/auth/v3/enterpassword')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    sign: encryptData.sign,\n    cryptogram: encryptData.cryptogram\n  })\nawait worker.setSessionValue('cryptogram', response.body.cryptogram)\nawait worker.setSessionValue('nextStep', response.body.nextStep)\nawait worker.setSessionValue('token', response.body.token)",
                  "err": {},
                  "uuid": "ccae3709-a926-424e-9f09-e1e24f27e2ff",
                  "parentUUID": "8f283a39-ddf5-4c30-a790-ea29a6144fb4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Авторизація POST /enterpassword should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (!response) {\n  this.skip()\n}\nexpect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "885c5181-1198-4dd6-b9e7-46b2f15237a1",
                  "parentUUID": "8f283a39-ddf5-4c30-a790-ea29a6144fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Авторизація POST /enterpassword should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (!response) {\n  this.skip()\n}\nconst schema = {\n  type: 'object',\n  properties: {\n    token: { type: 'string' },\n    name: { type: 'string' },\n    email: { type: 'string' },\n    nextStep: { type: 'string' },\n    sign: { type: 'string' },\n    cryptogram: { type: 'string' }\n  },\n  required: ['token', 'name', 'email', 'nextStep', 'sign', 'cryptogram']\n}\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "bb68e6c6-e4b9-4668-9c58-8ed1e8cc506e",
                  "parentUUID": "8f283a39-ddf5-4c30-a790-ea29a6144fb4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "885c5181-1198-4dd6-b9e7-46b2f15237a1",
                "bb68e6c6-e4b9-4668-9c58-8ed1e8cc506e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f43ac670-567c-4dbd-b5b9-53a0d982d1f2",
          "title": "Дашборд",
          "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
          "file": "/tests/auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Дашборд\"",
              "fullTitle": "Дашборд \"before all\" hook in \"Дашборд\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "token = await worker.getSessionValue('token')",
              "err": {},
              "uuid": "23d6c9ec-bcda-46ad-b08e-7c32d80b9d01",
              "parentUUID": "f43ac670-567c-4dbd-b5b9-53a0d982d1f2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2929b161-5f50-40f8-a151-63aec648ba49",
              "title": "GET /cards",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"GET /cards\"",
                  "fullTitle": "Дашборд GET /cards \"before all\" hook in \"GET /cards\"",
                  "timedOut": false,
                  "duration": 1369,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await request(baseUrl)\n  .get('/cards/v3?forceCacheReload=true')\n  .set('Authorization', `Bearer ${token}`)\n  .send()\nconst cardAccounts = response.body\nawait worker.setSessionValue('cardAccounts', cardAccounts)",
                  "err": {},
                  "uuid": "d980a51a-5427-4a30-b2b9-76d7f8daecf8",
                  "parentUUID": "2929b161-5f50-40f8-a151-63aec648ba49",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Дашборд GET /cards should return 200 OK status code",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "96013c34-d4eb-4cee-84c7-4bbf51123a74",
                  "parentUUID": "2929b161-5f50-40f8-a151-63aec648ba49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Дашборд GET /cards should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const schema = require('../json_schema/cards.json')\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "0a60df85-c47a-4a76-ac61-aa73951e7d45",
                  "parentUUID": "2929b161-5f50-40f8-a151-63aec648ba49",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "96013c34-d4eb-4cee-84c7-4bbf51123a74",
                "0a60df85-c47a-4a76-ac61-aa73951e7d45"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b8bcc8b1-89c6-4ff4-85f8-b8bd2f990722",
          "title": "Переказ з картки на картку",
          "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
          "file": "/tests/auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Переказ з картки на картку\"",
              "fullTitle": "Переказ з картки на картку \"before all\" hook in \"Переказ з картки на картку\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(20000)\ntoken = await worker.getSessionValue('token')\nclientPrivateKey = await worker.getSessionValue('clientPrivateKey')",
              "err": {},
              "uuid": "64731e18-0899-4f47-8a3b-ef14a1a9ba9d",
              "parentUUID": "b8bcc8b1-89c6-4ff4-85f8-b8bd2f990722",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "42344624-1cee-4ab5-a4e2-c992319a67ef",
              "title": "GET /p2p/markup",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"GET /p2p/markup\"",
                  "fullTitle": "Переказ з картки на картку GET /p2p/markup \"before all\" hook in \"GET /p2p/markup\"",
                  "timedOut": false,
                  "duration": 551,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await request(baseUrl)\n  .get('/payments/p2p/markup')\n  .set('Authorization', `Bearer ${token}`)\n  .send()\nconst cryptogram = response.body.cryptogram\nconst sessionGuid = response.body.sessionGuid\nawait worker.setSessionValue('cryptogram', cryptogram)\nawait worker.setSessionValue('sessionGuid', sessionGuid)",
                  "err": {},
                  "uuid": "8622f607-ca92-4914-ad40-7ea209560542",
                  "parentUUID": "42344624-1cee-4ab5-a4e2-c992319a67ef",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Переказ з картки на картку GET /p2p/markup should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "4e885c84-0e26-4641-a94a-464d628f6e40",
                  "parentUUID": "42344624-1cee-4ab5-a4e2-c992319a67ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Переказ з картки на картку GET /p2p/markup should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const schema = require('../json_schema/p2p_markup.json')\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "744ef3fc-bb19-49e2-94a6-7730cb92f0a7",
                  "parentUUID": "42344624-1cee-4ab5-a4e2-c992319a67ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4e885c84-0e26-4641-a94a-464d628f6e40",
                "744ef3fc-bb19-49e2-94a6-7730cb92f0a7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2b742b6f-28e6-4530-b592-ad2d3742fe3c",
              "title": "GET /p2p/setInput",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"GET /p2p/setInput\"",
                  "fullTitle": "Переказ з картки на картку GET /p2p/setInput \"before all\" hook in \"GET /p2p/setInput\"",
                  "timedOut": false,
                  "duration": 4639,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(20000)\nconst cardAccounts = await worker.getSessionValue('cardAccounts')\nconst cryptogram = await worker.getSessionValue('cryptogram')\nconst sessionGuid = await worker.getSessionValue('sessionGuid')\nconst serverPublicKey = await worker.getSessionValue('serverPublicKey')\nconst challange = worker.decrypt(cryptogram, clientPrivateKey)\nconst encryptData = worker.encryptAndSign(\n  {\n    challengePass: challange\n  },\n  serverPublicKey,\n  clientPrivateKey\n)\npayerCard = await worker.findCardByName(cardAccounts, payerCardName)\nconst amount = await worker.randomAmount()\nresponse = await request(baseUrl)\n  .post('/payments/p2p/setInput')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    sign: encryptData.sign,\n    cryptogram: encryptData.cryptogram,\n    sessionGuid,\n    payerId: `cardNumber:${payerCard.cards[0].cardNumber}`,\n    recipientId: `cardNumber:${recipientCardNumber}`,\n    amount\n  })\nawait worker.setSessionValue('cryptogram', response.body.cryptogram)",
                  "err": {},
                  "uuid": "c1bc368d-2924-4473-a39a-1f52c5f600c7",
                  "parentUUID": "2b742b6f-28e6-4530-b592-ad2d3742fe3c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Переказ з картки на картку GET /p2p/setInput should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "3a452b8c-868d-4ffa-9bf1-2b45bcaa468c",
                  "parentUUID": "2b742b6f-28e6-4530-b592-ad2d3742fe3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Переказ з картки на картку GET /p2p/setInput should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const schema = require('../json_schema/p2p_setInput.json')\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "2c65452f-7903-4b91-895c-e32f42b05e25",
                  "parentUUID": "2b742b6f-28e6-4530-b592-ad2d3742fe3c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a452b8c-868d-4ffa-9bf1-2b45bcaa468c",
                "2c65452f-7903-4b91-895c-e32f42b05e25"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6674aa97-c023-4801-aa9a-751067be4ee1",
              "title": "GET /p2p/commission",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"GET /p2p/commission\"",
                  "fullTitle": "Переказ з картки на картку GET /p2p/commission \"before all\" hook in \"GET /p2p/commission\"",
                  "timedOut": false,
                  "duration": 2192,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(20000)\nresponse = await request(baseUrl)\n  .get('/payments/p2p/commission')\n  .set('Authorization', `Bearer ${token}`)\n  .send()",
                  "err": {},
                  "uuid": "49f8a12d-f933-4ddf-9653-43e6e129a977",
                  "parentUUID": "6674aa97-c023-4801-aa9a-751067be4ee1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Переказ з картки на картку GET /p2p/commission should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "796ee0bf-69d4-4123-92a0-0b06d3d54679",
                  "parentUUID": "6674aa97-c023-4801-aa9a-751067be4ee1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Переказ з картки на картку GET /p2p/commission should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const schema = require('../json_schema/p2p_commission.json')\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "10dbea85-2978-4c91-9720-02999a3e03dc",
                  "parentUUID": "6674aa97-c023-4801-aa9a-751067be4ee1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "796ee0bf-69d4-4123-92a0-0b06d3d54679",
                "10dbea85-2978-4c91-9720-02999a3e03dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3c6b2870-5620-4980-887c-b285902afbf5",
              "title": "GET /p2p/confirm",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"GET /p2p/confirm\"",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm \"before all\" hook in \"GET /p2p/confirm\"",
                  "timedOut": false,
                  "duration": 1068,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(20000)\nconst cryptogram = await worker.getSessionValue('cryptogram')\nconst sessionGuid = await worker.getSessionValue('sessionGuid')\nconst serverPublicKey = await worker.getSessionValue('serverPublicKey')\nconst challange = worker.decrypt(cryptogram, clientPrivateKey)\nconst encryptData = worker.encryptAndSign(\n  {\n    challengePass: challange,\n    password\n  },\n  serverPublicKey,\n  clientPrivateKey\n)\nresponse = await request(baseUrl)\n  .post('/payments/p2p/confirm')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    sign: encryptData.sign,\n    cryptogram: encryptData.cryptogram,\n    sessionGuid\n  })\nawait worker.setSessionValue('cryptogram', response.body.cryptogram)",
                  "err": {},
                  "uuid": "167b8ba2-c704-4933-a645-489005ac293a",
                  "parentUUID": "3c6b2870-5620-4980-887c-b285902afbf5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "49e96142-3ce5-4f57-92f1-f1f97b53e75c",
                  "parentUUID": "3c6b2870-5620-4980-887c-b285902afbf5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 5,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const schema = require('../json_schema/p2p_confirm.json')\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {
                    "message": "AssertionError: expected false to be true",
                    "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (tests/auth.test.js:479:26)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "24d9e81c-af15-431f-ba23-dadc6cfe95ff",
                  "parentUUID": "3c6b2870-5620-4980-887c-b285902afbf5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct title (Переказ з картки на картку)",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm should have correct title (Переказ з картки на картку)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.body.operation.title).to.equal(\n  'Переказ з картки на картку'\n)",
                  "err": {},
                  "uuid": "c1123a64-5dd2-47da-a56d-6a2f75c3d159",
                  "parentUUID": "3c6b2870-5620-4980-887c-b285902afbf5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct subtitle (Переказ з картки на картку)",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm should have correct subtitle (Переказ з картки на картку)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.body.operation.subtitle).to.equal(\n  'Переказ з картки на картку'\n)",
                  "err": {},
                  "uuid": "be080ecf-e3a5-4a0d-b0b3-f06c1f422648",
                  "parentUUID": "3c6b2870-5620-4980-887c-b285902afbf5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct status (processing)",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm should have correct status (processing)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.body.operation.status).to.equal('processing')",
                  "err": {},
                  "uuid": "e9230447-8bf9-4d59-ab48-deac2795939c",
                  "parentUUID": "3c6b2870-5620-4980-887c-b285902afbf5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct dark icon URL",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm should have correct dark icon URL",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.body.operation.darkIcon).to.equal(\n  'https://content.vostok.bank/vostokApp/payment-history/categories/logos/TransferCard-Dark.png'\n)",
                  "err": {},
                  "uuid": "1fc82f5e-9f06-460f-a6d2-117c84870b9c",
                  "parentUUID": "3c6b2870-5620-4980-887c-b285902afbf5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct light icon URL",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm should have correct light icon URL",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.body.operation.lightIcon).to.equal(\n  'https://content.vostok.bank/vostokApp/payment-history/categories/logos/TransferCard-Light.png'\n)",
                  "err": {},
                  "uuid": "3e9f4c52-4422-446a-916a-480c1658fc5a",
                  "parentUUID": "3c6b2870-5620-4980-887c-b285902afbf5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "49e96142-3ce5-4f57-92f1-f1f97b53e75c",
                "c1123a64-5dd2-47da-a56d-6a2f75c3d159",
                "be080ecf-e3a5-4a0d-b0b3-f06c1f422648",
                "e9230447-8bf9-4d59-ab48-deac2795939c",
                "1fc82f5e-9f06-460f-a6d2-117c84870b9c",
                "3e9f4c52-4422-446a-916a-480c1658fc5a"
              ],
              "failures": [
                "24d9e81c-af15-431f-ba23-dadc6cfe95ff"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}
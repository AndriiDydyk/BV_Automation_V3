{
  "stats": {
    "suites": 12,
    "tests": 23,
    "passes": 20,
    "pending": 2,
    "failures": 1,
    "start": "2024-04-07T08:27:03.481Z",
    "end": "2024-04-07T08:27:14.494Z",
    "duration": 11013,
    "testsRegistered": 23,
    "passPercent": 95.23809523809523,
    "pendingPercent": 8.695652173913043,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0eaed593-9ad2-4bb0-b51c-b84fb08a1cc1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b3e29eb2-b68b-4113-9455-5189d72415f5",
          "title": "Авторизація",
          "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
          "file": "/tests/auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Авторизація\"",
              "fullTitle": "Авторизація \"before all\" hook in \"Авторизація\"",
              "timedOut": false,
              "duration": 11,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "clientPrivateKey = await worker.getSessionValue('clientPrivateKey')\nclientPublicKey = await worker.getSessionValue('clientPublicKey')\ndevice = await worker.getSessionValue('iosReleaseDevice')\n// device = await worker.getSessionValue('iosDebugDevice')",
              "err": {},
              "uuid": "3d7741ed-ec72-4293-83f9-a037fde3a393",
              "parentUUID": "b3e29eb2-b68b-4113-9455-5189d72415f5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9276a72e-6617-49c8-8bd5-3a1bb31ffefe",
              "title": "POST /start",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /start\"",
                  "fullTitle": "Авторизація POST /start \"before all\" hook in \"POST /start\"",
                  "timedOut": false,
                  "duration": 331,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await request(baseUrl).post('/auth/v3/start').send({\n  clientPublicKey,\n  phoneNumber,\n  device\n})\nconst token = response.body.token\nconst serverPublicKey = response.body.serverPublicKey\nconst cryptogram = response.body.cryptogram\nawait worker.setSessionValue('token', token)\nawait worker.setSessionValue('serverPublicKey', serverPublicKey)\nawait worker.setSessionValue('cryptogram', cryptogram)",
                  "err": {},
                  "uuid": "b5b9ea5b-30af-43d9-8071-021ce63e1da5",
                  "parentUUID": "9276a72e-6617-49c8-8bd5-3a1bb31ffefe",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Авторизація POST /start should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "89812b69-3d0c-441e-a46d-31a5cd466a84",
                  "parentUUID": "9276a72e-6617-49c8-8bd5-3a1bb31ffefe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Авторизація POST /start should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const schema = {\n  type: 'object',\n  properties: {\n    serverPublicKey: { type: 'string' },\n    token: { type: 'string' },\n    sign: { type: 'string' },\n    cryptogram: { type: 'string' }\n  },\n  required: ['serverPublicKey', 'token', 'sign', 'cryptogram']\n}\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "1cb75ee7-7d25-45a2-a6f2-0345d885a807",
                  "parentUUID": "9276a72e-6617-49c8-8bd5-3a1bb31ffefe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89812b69-3d0c-441e-a46d-31a5cd466a84",
                "1cb75ee7-7d25-45a2-a6f2-0345d885a807"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "17c3ba8b-0c8f-4d2e-bf5f-f45d6c0ab8f0",
              "title": "POST /nextStep",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /nextStep\"",
                  "fullTitle": "Авторизація POST /nextStep \"before all\" hook in \"POST /nextStep\"",
                  "timedOut": false,
                  "duration": 909,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const token = await worker.getSessionValue('token')\nconst cryptogram = await worker.getSessionValue('cryptogram')\nconst serverPublicKey = await worker.getSessionValue('serverPublicKey')\nconst challange = worker.decrypt(cryptogram, clientPrivateKey)\nconst encryptData = worker.encryptAndSign(\n  {\n    challengePass: challange\n  },\n  serverPublicKey,\n  clientPrivateKey\n)\nresponse = await request(baseUrl)\n  .post('/auth/v4/nextstep')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    sign: encryptData.sign,\n    cryptogram: encryptData.cryptogram\n  })\nawait worker.setSessionValue('cryptogram', response.body.cryptogram)\nawait worker.setSessionValue('nextStep', response.body.nextStep)",
                  "err": {},
                  "uuid": "2405ba14-9ecb-4d49-ad45-66cc8d70840f",
                  "parentUUID": "17c3ba8b-0c8f-4d2e-bf5f-f45d6c0ab8f0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Авторизація POST /nextStep should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "8613e71d-f4a6-4100-95c7-1647aff4785c",
                  "parentUUID": "17c3ba8b-0c8f-4d2e-bf5f-f45d6c0ab8f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Авторизація POST /nextStep should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const schema = {\n  type: 'object',\n  properties: {\n    sign: { type: 'string' },\n    cryptogram: { type: 'string' }\n  },\n  required: ['sign', 'cryptogram']\n}\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "87382caf-b2de-47cf-ba1e-0f09bae94c7d",
                  "parentUUID": "17c3ba8b-0c8f-4d2e-bf5f-f45d6c0ab8f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8613e71d-f4a6-4100-95c7-1647aff4785c",
                "87382caf-b2de-47cf-ba1e-0f09bae94c7d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "919997f8-fddb-426c-80d4-843cc39c3c77",
              "title": "POST /otp/confirm",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /otp/confirm\"",
                  "fullTitle": "Авторизація POST /otp/confirm \"before all\" hook in \"POST /otp/confirm\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nextStep = await worker.getSessionValue('nextStep')\nif (nextStep !== 'requestOtp') {\n  return\n}\nconst token = await worker.getSessionValue('token')\nconst cryptogram = await worker.getSessionValue('cryptogram')\nconst serverPublicKey = await worker.getSessionValue('serverPublicKey')\nconst challange = worker.decrypt(cryptogram, clientPrivateKey)\nconst encryptData = worker.encryptAndSign(\n  {\n    challengePass: challange,\n    otp\n  },\n  serverPublicKey,\n  clientPrivateKey\n)\nresponse = await request(baseUrl)\n  .post('/auth/v4/otp/confirm')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    sign: encryptData.sign,\n    cryptogram: encryptData.cryptogram\n  })\nawait worker.setSessionValue('cryptogram', response.body.cryptogram)\nawait worker.setSessionValue('nextStep', response.body.nextStep)",
                  "err": {},
                  "uuid": "dd3a7f6c-291c-4620-b17b-53d42055808a",
                  "parentUUID": "919997f8-fddb-426c-80d4-843cc39c3c77",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Авторизація POST /otp/confirm should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "if (!response) {\n  this.skip() // Пропустити виконання тесту\n}\nexpect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "9b050e1c-e59c-451a-9238-bd48b19f0ec4",
                  "parentUUID": "919997f8-fddb-426c-80d4-843cc39c3c77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Авторизація POST /otp/confirm should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "if (!response) {\n  this.skip() // Пропустити виконання тесту\n}\nconst schema = {\n  type: 'object',\n  properties: {\n    sign: { type: 'string' },\n    cryptogram: { type: 'string' }\n  },\n  required: ['sign', 'cryptogram']\n}\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "590f48fb-88dd-4395-907e-efaa3f38c489",
                  "parentUUID": "919997f8-fddb-426c-80d4-843cc39c3c77",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "9b050e1c-e59c-451a-9238-bd48b19f0ec4",
                "590f48fb-88dd-4395-907e-efaa3f38c489"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3a8c7966-78b3-4115-b46c-4327dd293d92",
              "title": "POST /enterpassword",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /enterpassword\"",
                  "fullTitle": "Авторизація POST /enterpassword \"before all\" hook in \"POST /enterpassword\"",
                  "timedOut": false,
                  "duration": 362,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nextStep = await worker.getSessionValue('nextStep')\nif (nextStep !== 'enterPassword') {\n  return\n}\nconst token = await worker.getSessionValue('token')\nconst cryptogram = await worker.getSessionValue('cryptogram')\nconst serverPublicKey = await worker.getSessionValue('serverPublicKey')\nconst challange = worker.decrypt(cryptogram, clientPrivateKey)\nconst encryptData = worker.encryptAndSign(\n  {\n    challengePass: challange,\n    password\n  },\n  serverPublicKey,\n  clientPrivateKey\n)\nresponse = await request(baseUrl)\n  .post('/auth/v3/enterpassword')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    sign: encryptData.sign,\n    cryptogram: encryptData.cryptogram\n  })\nawait worker.setSessionValue('cryptogram', response.body.cryptogram)\nawait worker.setSessionValue('nextStep', response.body.nextStep)\nawait worker.setSessionValue('token', response.body.token)",
                  "err": {},
                  "uuid": "e9c1dcd7-4bfc-415c-8a24-b38f154ee267",
                  "parentUUID": "3a8c7966-78b3-4115-b46c-4327dd293d92",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Авторизація POST /enterpassword should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (!response) {\n  this.skip()\n}\nexpect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "95fcc208-1754-45e9-bfdc-576c093a237f",
                  "parentUUID": "3a8c7966-78b3-4115-b46c-4327dd293d92",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Авторизація POST /enterpassword should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (!response) {\n  this.skip()\n}\nconst schema = {\n  type: 'object',\n  properties: {\n    token: { type: 'string' },\n    name: { type: 'string' },\n    email: { type: 'string' },\n    nextStep: { type: 'string' },\n    sign: { type: 'string' },\n    cryptogram: { type: 'string' }\n  },\n  required: ['token', 'name', 'email', 'nextStep', 'sign', 'cryptogram']\n}\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "12a0b6fd-467a-4810-9d39-d0463b141be0",
                  "parentUUID": "3a8c7966-78b3-4115-b46c-4327dd293d92",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95fcc208-1754-45e9-bfdc-576c093a237f",
                "12a0b6fd-467a-4810-9d39-d0463b141be0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d33cf8c1-18c5-4065-8a09-9329f459fff5",
          "title": "Дашборд",
          "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
          "file": "/tests/auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Дашборд\"",
              "fullTitle": "Дашборд \"before all\" hook in \"Дашборд\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "token = await worker.getSessionValue('token')",
              "err": {},
              "uuid": "1a8b5406-7516-4b31-aa72-a5eea0ab2a6e",
              "parentUUID": "d33cf8c1-18c5-4065-8a09-9329f459fff5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a68d2746-2dca-41fc-a7bf-cf1967ce2d2d",
              "title": "GET /cards",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"GET /cards\"",
                  "fullTitle": "Дашборд GET /cards \"before all\" hook in \"GET /cards\"",
                  "timedOut": false,
                  "duration": 1270,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await request(baseUrl)\n  .get('/cards/v3?forceCacheReload=true')\n  .set('Authorization', `Bearer ${token}`)\n  .send()\nconst cardAccounts = response.body\nawait worker.setSessionValue('cardAccounts', cardAccounts)",
                  "err": {},
                  "uuid": "fe9232fb-755e-4bfd-aca9-8663142edfab",
                  "parentUUID": "a68d2746-2dca-41fc-a7bf-cf1967ce2d2d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Дашборд GET /cards should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "162e6550-bc19-424d-91f6-5f56e8ca8e89",
                  "parentUUID": "a68d2746-2dca-41fc-a7bf-cf1967ce2d2d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Дашборд GET /cards should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const schema = require('../json_schema/cards.json')\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "a2043c2a-7b83-40ea-99ad-c8f7f6569afe",
                  "parentUUID": "a68d2746-2dca-41fc-a7bf-cf1967ce2d2d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "162e6550-bc19-424d-91f6-5f56e8ca8e89",
                "a2043c2a-7b83-40ea-99ad-c8f7f6569afe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9c913268-d0ed-42a9-b212-1a3f6891830f",
          "title": "Переказ з картки на картку",
          "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
          "file": "/tests/auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Переказ з картки на картку\"",
              "fullTitle": "Переказ з картки на картку \"before all\" hook in \"Переказ з картки на картку\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(20000)\ntoken = await worker.getSessionValue('token')\nclientPrivateKey = await worker.getSessionValue('clientPrivateKey')",
              "err": {},
              "uuid": "f3df1b13-04c1-4c11-8ab7-604b5f4cf701",
              "parentUUID": "9c913268-d0ed-42a9-b212-1a3f6891830f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "709d0fbb-eabc-4ae2-9e26-1f40bd9eace0",
              "title": "GET /p2p/markup",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"GET /p2p/markup\"",
                  "fullTitle": "Переказ з картки на картку GET /p2p/markup \"before all\" hook in \"GET /p2p/markup\"",
                  "timedOut": false,
                  "duration": 592,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await request(baseUrl)\n  .get('/payments/p2p/markup')\n  .set('Authorization', `Bearer ${token}`)\n  .send()\nconst cryptogram = response.body.cryptogram\nconst sessionGuid = response.body.sessionGuid\nawait worker.setSessionValue('cryptogram', cryptogram)\nawait worker.setSessionValue('sessionGuid', sessionGuid)",
                  "err": {},
                  "uuid": "ec3a0fb2-fd48-47e6-99a5-e5687f5fab1c",
                  "parentUUID": "709d0fbb-eabc-4ae2-9e26-1f40bd9eace0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Переказ з картки на картку GET /p2p/markup should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "b1dae86b-c7c6-42a2-9771-06a5f980f3fe",
                  "parentUUID": "709d0fbb-eabc-4ae2-9e26-1f40bd9eace0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Переказ з картки на картку GET /p2p/markup should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const schema = require('../json_schema/p2p_markup.json')\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "90974911-1417-4a20-ba64-bdd86320385b",
                  "parentUUID": "709d0fbb-eabc-4ae2-9e26-1f40bd9eace0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b1dae86b-c7c6-42a2-9771-06a5f980f3fe",
                "90974911-1417-4a20-ba64-bdd86320385b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3b3aaa6f-eb03-4a34-9366-74c6c45349fd",
              "title": "GET /p2p/setInput",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"GET /p2p/setInput\"",
                  "fullTitle": "Переказ з картки на картку GET /p2p/setInput \"before all\" hook in \"GET /p2p/setInput\"",
                  "timedOut": false,
                  "duration": 4492,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(20000)\nconst cardAccounts = await worker.getSessionValue('cardAccounts')\nconst cryptogram = await worker.getSessionValue('cryptogram')\nconst sessionGuid = await worker.getSessionValue('sessionGuid')\nconst serverPublicKey = await worker.getSessionValue('serverPublicKey')\nconst challange = worker.decrypt(cryptogram, clientPrivateKey)\nconst encryptData = worker.encryptAndSign(\n  {\n    challengePass: challange\n  },\n  serverPublicKey,\n  clientPrivateKey\n)\npayerCard = await worker.findCardByName(cardAccounts, payerCardName)\nconst amount = await worker.randomAmount()\nresponse = await request(baseUrl)\n  .post('/payments/p2p/setInput')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    sign: encryptData.sign,\n    cryptogram: encryptData.cryptogram,\n    sessionGuid,\n    payerId: `cardNumber:${payerCard.cards[0].cardNumber}`,\n    recipientId: `cardNumber:${recipientCardNumber}`,\n    amount\n  })\nawait worker.setSessionValue('cryptogram', response.body.cryptogram)",
                  "err": {},
                  "uuid": "e7d8f892-3da7-406b-8f37-a7f627462bd7",
                  "parentUUID": "3b3aaa6f-eb03-4a34-9366-74c6c45349fd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Переказ з картки на картку GET /p2p/setInput should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "fe50c4d0-2450-4d95-8c70-a0920c654cd4",
                  "parentUUID": "3b3aaa6f-eb03-4a34-9366-74c6c45349fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Переказ з картки на картку GET /p2p/setInput should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const schema = require('../json_schema/p2p_setInput.json')\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "ea8dad7e-f541-4a45-9248-538999dd0626",
                  "parentUUID": "3b3aaa6f-eb03-4a34-9366-74c6c45349fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe50c4d0-2450-4d95-8c70-a0920c654cd4",
                "ea8dad7e-f541-4a45-9248-538999dd0626"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9111fc56-5fe7-4f90-80cb-1f2cc8d21c76",
              "title": "GET /p2p/commission",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"GET /p2p/commission\"",
                  "fullTitle": "Переказ з картки на картку GET /p2p/commission \"before all\" hook in \"GET /p2p/commission\"",
                  "timedOut": false,
                  "duration": 1844,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(20000)\nresponse = await request(baseUrl)\n  .get('/payments/p2p/commission')\n  .set('Authorization', `Bearer ${token}`)\n  .send()",
                  "err": {},
                  "uuid": "abc929da-a8f3-489c-b589-349285b2a51a",
                  "parentUUID": "9111fc56-5fe7-4f90-80cb-1f2cc8d21c76",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Переказ з картки на картку GET /p2p/commission should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "9041cf22-9166-4234-8be5-d4554f5c136b",
                  "parentUUID": "9111fc56-5fe7-4f90-80cb-1f2cc8d21c76",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Переказ з картки на картку GET /p2p/commission should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const schema = require('../json_schema/p2p_commission.json')\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "c2dc2879-b33a-4ee5-bc62-5c44d5fc4e0a",
                  "parentUUID": "9111fc56-5fe7-4f90-80cb-1f2cc8d21c76",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9041cf22-9166-4234-8be5-d4554f5c136b",
                "c2dc2879-b33a-4ee5-bc62-5c44d5fc4e0a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "01fdd6bc-92f9-42e4-90da-d9111df27bfe",
              "title": "GET /p2p/confirm",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"GET /p2p/confirm\"",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm \"before all\" hook in \"GET /p2p/confirm\"",
                  "timedOut": false,
                  "duration": 1119,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(20000)\nconst cryptogram = await worker.getSessionValue('cryptogram')\nconst sessionGuid = await worker.getSessionValue('sessionGuid')\nconst serverPublicKey = await worker.getSessionValue('serverPublicKey')\nconst challange = worker.decrypt(cryptogram, clientPrivateKey)\nconst encryptData = worker.encryptAndSign(\n  {\n    challengePass: challange,\n    password\n  },\n  serverPublicKey,\n  clientPrivateKey\n)\nresponse = await request(baseUrl)\n  .post('/payments/p2p/confirm')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    sign: encryptData.sign,\n    cryptogram: encryptData.cryptogram,\n    sessionGuid\n  })\nawait worker.setSessionValue('cryptogram', response.body.cryptogram)",
                  "err": {},
                  "uuid": "40bbbef7-2a82-4478-ae1d-21cd3142e3a7",
                  "parentUUID": "01fdd6bc-92f9-42e4-90da-d9111df27bfe",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "b05c6ddb-57a8-4633-8daf-a01f4c64c393",
                  "parentUUID": "01fdd6bc-92f9-42e4-90da-d9111df27bfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 6,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const schema = require('../json_schema/p2p_confirm.json')\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {
                    "message": "AssertionError: expected false to be true",
                    "estack": "AssertionError: expected false to be true\n    at Context.<anonymous> (tests/auth.test.js:479:26)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "1e85ed90-7cf3-463a-a21d-701634c57844",
                  "parentUUID": "01fdd6bc-92f9-42e4-90da-d9111df27bfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct title (Переказ з картки на картку)",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm should have correct title (Переказ з картки на картку)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.body.operation.title).to.equal(\n  'Переказ з картки на картку'\n)",
                  "err": {},
                  "uuid": "67ede197-cce8-4fe5-a1bd-68a0356b7bf4",
                  "parentUUID": "01fdd6bc-92f9-42e4-90da-d9111df27bfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct subtitle (Переказ з картки на картку)",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm should have correct subtitle (Переказ з картки на картку)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.body.operation.subtitle).to.equal(\n  'Переказ з картки на картку'\n)",
                  "err": {},
                  "uuid": "31016d6f-fca2-47f3-bc83-9aabfad94c49",
                  "parentUUID": "01fdd6bc-92f9-42e4-90da-d9111df27bfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct status (processing)",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm should have correct status (processing)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.body.operation.status).to.equal('processing')",
                  "err": {},
                  "uuid": "a282dfe4-7130-4bbb-9a5e-9fc176786f6d",
                  "parentUUID": "01fdd6bc-92f9-42e4-90da-d9111df27bfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct dark icon URL",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm should have correct dark icon URL",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.body.operation.darkIcon).to.equal(\n  'https://content.vostok.bank/vostokApp/payment-history/categories/logos/TransferCard-Dark.png'\n)",
                  "err": {},
                  "uuid": "38f94544-a871-4252-9eed-e51bef3b508f",
                  "parentUUID": "01fdd6bc-92f9-42e4-90da-d9111df27bfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct light icon URL",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm should have correct light icon URL",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.body.operation.lightIcon).to.equal(\n  'https://content.vostok.bank/vostokApp/payment-history/categories/logos/TransferCard-Light.png'\n)",
                  "err": {},
                  "uuid": "8814e5bd-9911-4c3c-bde4-d40fa1562a1b",
                  "parentUUID": "01fdd6bc-92f9-42e4-90da-d9111df27bfe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b05c6ddb-57a8-4633-8daf-a01f4c64c393",
                "67ede197-cce8-4fe5-a1bd-68a0356b7bf4",
                "31016d6f-fca2-47f3-bc83-9aabfad94c49",
                "a282dfe4-7130-4bbb-9a5e-9fc176786f6d",
                "38f94544-a871-4252-9eed-e51bef3b508f",
                "8814e5bd-9911-4c3c-bde4-d40fa1562a1b"
              ],
              "failures": [
                "1e85ed90-7cf3-463a-a21d-701634c57844"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}
{
  "stats": {
    "suites": 12,
    "tests": 23,
    "passes": 21,
    "pending": 2,
    "failures": 0,
    "start": "2024-04-06T16:54:32.241Z",
    "end": "2024-04-06T16:54:37.787Z",
    "duration": 5546,
    "testsRegistered": 23,
    "passPercent": 100,
    "pendingPercent": 8.695652173913043,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "91d27e28-22d9-4ee5-967a-ea6c1e722606",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fb443749-819e-4389-bfd0-17a4280bbbdc",
          "title": "Авторизація",
          "fullFile": "/Users/andriidydyk/Documents/BV_Automation_Supertest/tests/auth.test.js",
          "file": "/tests/auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Авторизація\"",
              "fullTitle": "Авторизація \"before all\" hook in \"Авторизація\"",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "clientPrivateKey = await worker.getSessionValue('clientPrivateKey')\nclientPublicKey = await worker.getSessionValue('clientPublicKey')\ndevice = await worker.getSessionValue('iosReleaseDevice')\n// device = await worker.getSessionValue('iosDebugDevice')",
              "err": {},
              "uuid": "bffbaee7-14f7-4a00-911a-88e919ceacd0",
              "parentUUID": "fb443749-819e-4389-bfd0-17a4280bbbdc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1700c84a-79e0-4293-a24e-f3f849ad1e56",
              "title": "POST /start",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation_Supertest/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /start\"",
                  "fullTitle": "Авторизація POST /start \"before all\" hook in \"POST /start\"",
                  "timedOut": false,
                  "duration": 359,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await request(baseUrl).post('/auth/v3/start').send({\n  clientPublicKey,\n  phoneNumber,\n  device\n})\nconst token = response.body.token\nconst serverPublicKey = response.body.serverPublicKey\nconst cryptogram = response.body.cryptogram\nawait worker.setSessionValue('token', token)\nawait worker.setSessionValue('serverPublicKey', serverPublicKey)\nawait worker.setSessionValue('cryptogram', cryptogram)",
                  "err": {},
                  "uuid": "db2cfefb-4668-4d3b-8eac-2ba3b7df1735",
                  "parentUUID": "1700c84a-79e0-4293-a24e-f3f849ad1e56",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Авторизація POST /start should return 200 OK status code",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "ef84d11f-e537-47de-b0db-99de3346f56f",
                  "parentUUID": "1700c84a-79e0-4293-a24e-f3f849ad1e56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Авторизація POST /start should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const schema = {\n  type: 'object',\n  properties: {\n    serverPublicKey: { type: 'string' },\n    token: { type: 'string' },\n    sign: { type: 'string' },\n    cryptogram: { type: 'string' }\n  },\n  required: ['serverPublicKey', 'token', 'sign', 'cryptogram']\n}\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "a9f8703b-1865-4bc7-bc36-627950b86ce6",
                  "parentUUID": "1700c84a-79e0-4293-a24e-f3f849ad1e56",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef84d11f-e537-47de-b0db-99de3346f56f",
                "a9f8703b-1865-4bc7-bc36-627950b86ce6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "83ac4011-edc2-4eda-8f0e-157619177668",
              "title": "POST /nextStep",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation_Supertest/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /nextStep\"",
                  "fullTitle": "Авторизація POST /nextStep \"before all\" hook in \"POST /nextStep\"",
                  "timedOut": false,
                  "duration": 422,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const token = await worker.getSessionValue('token')\nconst cryptogram = await worker.getSessionValue('cryptogram')\nconst serverPublicKey = await worker.getSessionValue('serverPublicKey')\nconst challange = worker.decrypt(cryptogram, clientPrivateKey)\nconst encryptData = worker.encryptAndSign(\n  {\n    challengePass: challange\n  },\n  serverPublicKey,\n  clientPrivateKey\n)\nresponse = await request(baseUrl)\n  .post('/auth/v4/nextstep')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    sign: encryptData.sign,\n    cryptogram: encryptData.cryptogram\n  })\nawait worker.setSessionValue('cryptogram', response.body.cryptogram)\nawait worker.setSessionValue('nextStep', response.body.nextStep)",
                  "err": {},
                  "uuid": "7101c588-1088-4932-90a2-b9b116f05e81",
                  "parentUUID": "83ac4011-edc2-4eda-8f0e-157619177668",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Авторизація POST /nextStep should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "cfbd284f-9467-47ca-a459-50037ce4971a",
                  "parentUUID": "83ac4011-edc2-4eda-8f0e-157619177668",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Авторизація POST /nextStep should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const schema = {\n  type: 'object',\n  properties: {\n    sign: { type: 'string' },\n    cryptogram: { type: 'string' }\n  },\n  required: ['sign', 'cryptogram']\n}\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "3b5628f1-2230-46cd-866e-d7807fb8637e",
                  "parentUUID": "83ac4011-edc2-4eda-8f0e-157619177668",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cfbd284f-9467-47ca-a459-50037ce4971a",
                "3b5628f1-2230-46cd-866e-d7807fb8637e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "48b826cc-1ac8-47b1-a5d2-a0c95f18ab93",
              "title": "POST /otp/confirm",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation_Supertest/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /otp/confirm\"",
                  "fullTitle": "Авторизація POST /otp/confirm \"before all\" hook in \"POST /otp/confirm\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nextStep = await worker.getSessionValue('nextStep')\nif (nextStep !== 'requestOtp') {\n  return\n}\nconst token = await worker.getSessionValue('token')\nconst cryptogram = await worker.getSessionValue('cryptogram')\nconst serverPublicKey = await worker.getSessionValue('serverPublicKey')\nconst challange = worker.decrypt(cryptogram, clientPrivateKey)\nconst encryptData = worker.encryptAndSign(\n  {\n    challengePass: challange,\n    otp\n  },\n  serverPublicKey,\n  clientPrivateKey\n)\nresponse = await request(baseUrl)\n  .post('/auth/v4/otp/confirm')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    sign: encryptData.sign,\n    cryptogram: encryptData.cryptogram\n  })\nawait worker.setSessionValue('cryptogram', response.body.cryptogram)\nawait worker.setSessionValue('nextStep', response.body.nextStep)",
                  "err": {},
                  "uuid": "919a1af4-3e6e-4070-9473-38aa02fac2d5",
                  "parentUUID": "48b826cc-1ac8-47b1-a5d2-a0c95f18ab93",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Авторизація POST /otp/confirm should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "if (!response) {\n  this.skip() // Пропустити виконання тесту\n}\nexpect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "c9b356ea-d68b-4607-b920-f7f021df8a09",
                  "parentUUID": "48b826cc-1ac8-47b1-a5d2-a0c95f18ab93",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Авторизація POST /otp/confirm should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "if (!response) {\n  this.skip() // Пропустити виконання тесту\n}\nconst schema = {\n  type: 'object',\n  properties: {\n    sign: { type: 'string' },\n    cryptogram: { type: 'string' }\n  },\n  required: ['sign', 'cryptogram']\n}\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "ccd010f3-8c3f-4b98-aacc-47501b8cbd64",
                  "parentUUID": "48b826cc-1ac8-47b1-a5d2-a0c95f18ab93",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "c9b356ea-d68b-4607-b920-f7f021df8a09",
                "ccd010f3-8c3f-4b98-aacc-47501b8cbd64"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1a7fd90b-b722-4470-9b2a-042f8bbfc093",
              "title": "POST /enterpassword",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation_Supertest/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /enterpassword\"",
                  "fullTitle": "Авторизація POST /enterpassword \"before all\" hook in \"POST /enterpassword\"",
                  "timedOut": false,
                  "duration": 342,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nextStep = await worker.getSessionValue('nextStep')\nif (nextStep !== 'enterPassword') {\n  return\n}\nconst token = await worker.getSessionValue('token')\nconst cryptogram = await worker.getSessionValue('cryptogram')\nconst serverPublicKey = await worker.getSessionValue('serverPublicKey')\nconst challange = worker.decrypt(cryptogram, clientPrivateKey)\nconst encryptData = worker.encryptAndSign(\n  {\n    challengePass: challange,\n    password\n  },\n  serverPublicKey,\n  clientPrivateKey\n)\nresponse = await request(baseUrl)\n  .post('/auth/v3/enterpassword')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    sign: encryptData.sign,\n    cryptogram: encryptData.cryptogram\n  })\nawait worker.setSessionValue('cryptogram', response.body.cryptogram)\nawait worker.setSessionValue('nextStep', response.body.nextStep)\nawait worker.setSessionValue('token', response.body.token)",
                  "err": {},
                  "uuid": "432ee640-8723-4156-aeb7-43c6108879d0",
                  "parentUUID": "1a7fd90b-b722-4470-9b2a-042f8bbfc093",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Авторизація POST /enterpassword should return 200 OK status code",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (!response) {\n  this.skip()\n}\nexpect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "1f3f7834-4d77-4d3a-99ec-1c483dad857c",
                  "parentUUID": "1a7fd90b-b722-4470-9b2a-042f8bbfc093",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Авторизація POST /enterpassword should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (!response) {\n  this.skip()\n}\nconst schema = {\n  type: 'object',\n  properties: {\n    token: { type: 'string' },\n    name: { type: 'string' },\n    email: { type: 'string' },\n    nextStep: { type: 'string' },\n    sign: { type: 'string' },\n    cryptogram: { type: 'string' }\n  },\n  required: ['token', 'name', 'email', 'nextStep', 'sign', 'cryptogram']\n}\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "813e8236-76df-41b8-9553-73bdacf2e49a",
                  "parentUUID": "1a7fd90b-b722-4470-9b2a-042f8bbfc093",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f3f7834-4d77-4d3a-99ec-1c483dad857c",
                "813e8236-76df-41b8-9553-73bdacf2e49a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9957ede9-faf8-491f-9589-85bd6381f460",
          "title": "Дашборд",
          "fullFile": "/Users/andriidydyk/Documents/BV_Automation_Supertest/tests/auth.test.js",
          "file": "/tests/auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Дашборд\"",
              "fullTitle": "Дашборд \"before all\" hook in \"Дашборд\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "token = await worker.getSessionValue('token')",
              "err": {},
              "uuid": "f14de2c1-5371-4547-a3f9-83b5dd667658",
              "parentUUID": "9957ede9-faf8-491f-9589-85bd6381f460",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5c41f68b-2941-4a94-86b0-c7afe1cf10f4",
              "title": "GET /cards",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation_Supertest/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"GET /cards\"",
                  "fullTitle": "Дашборд GET /cards \"before all\" hook in \"GET /cards\"",
                  "timedOut": false,
                  "duration": 812,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await request(baseUrl)\n  .get('/cards/v3?forceCacheReload=true')\n  .set('Authorization', `Bearer ${token}`)\n  .send()\nconst cardAccounts = response.body\nawait worker.setSessionValue('cardAccounts', cardAccounts)",
                  "err": {},
                  "uuid": "173249b1-7c12-4f27-8fda-3786bbfc60e6",
                  "parentUUID": "5c41f68b-2941-4a94-86b0-c7afe1cf10f4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Дашборд GET /cards should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "e254b851-1773-47cc-b2e3-caa96bfc4ac8",
                  "parentUUID": "5c41f68b-2941-4a94-86b0-c7afe1cf10f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Дашборд GET /cards should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const schema = require('../json_schema/cards.json')\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "c31ffd58-83f3-4428-98f5-fc035df4de63",
                  "parentUUID": "5c41f68b-2941-4a94-86b0-c7afe1cf10f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e254b851-1773-47cc-b2e3-caa96bfc4ac8",
                "c31ffd58-83f3-4428-98f5-fc035df4de63"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 26,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c1bd850d-e614-4861-a1bb-1195f387c674",
          "title": "Переказ з картки на картку",
          "fullFile": "/Users/andriidydyk/Documents/BV_Automation_Supertest/tests/auth.test.js",
          "file": "/tests/auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Переказ з картки на картку\"",
              "fullTitle": "Переказ з картки на картку \"before all\" hook in \"Переказ з картки на картку\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(20000)\ntoken = await worker.getSessionValue('token')\nclientPrivateKey = await worker.getSessionValue('clientPrivateKey')",
              "err": {},
              "uuid": "9f157f45-7286-4bef-b46e-8495c0a9b671",
              "parentUUID": "c1bd850d-e614-4861-a1bb-1195f387c674",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e1f1ea1f-395e-490a-82ac-846ed95982ca",
              "title": "GET /p2p/markup",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation_Supertest/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"GET /p2p/markup\"",
                  "fullTitle": "Переказ з картки на картку GET /p2p/markup \"before all\" hook in \"GET /p2p/markup\"",
                  "timedOut": false,
                  "duration": 217,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await request(baseUrl)\n  .get('/payments/p2p/markup')\n  .set('Authorization', `Bearer ${token}`)\n  .send()\nconst cryptogram = response.body.cryptogram\nconst sessionGuid = response.body.sessionGuid\nawait worker.setSessionValue('cryptogram', cryptogram)\nawait worker.setSessionValue('sessionGuid', sessionGuid)",
                  "err": {},
                  "uuid": "a0240fae-9221-4270-a0e4-3de075899853",
                  "parentUUID": "e1f1ea1f-395e-490a-82ac-846ed95982ca",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Переказ з картки на картку GET /p2p/markup should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "689fe46d-af7c-4408-998e-ffb078863f28",
                  "parentUUID": "e1f1ea1f-395e-490a-82ac-846ed95982ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Переказ з картки на картку GET /p2p/markup should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const schema = require('../json_schema/p2p_markup.json')\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "d43f86a2-62bd-43fc-8be6-ba41f0332c87",
                  "parentUUID": "e1f1ea1f-395e-490a-82ac-846ed95982ca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "689fe46d-af7c-4408-998e-ffb078863f28",
                "d43f86a2-62bd-43fc-8be6-ba41f0332c87"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0614c2e1-76a9-4707-bd0b-f38c38c3572a",
              "title": "GET /p2p/setInput",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation_Supertest/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"GET /p2p/setInput\"",
                  "fullTitle": "Переказ з картки на картку GET /p2p/setInput \"before all\" hook in \"GET /p2p/setInput\"",
                  "timedOut": false,
                  "duration": 1673,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(20000)\nconst cardAccounts = await worker.getSessionValue('cardAccounts')\nconst cryptogram = await worker.getSessionValue('cryptogram')\nconst sessionGuid = await worker.getSessionValue('sessionGuid')\nconst serverPublicKey = await worker.getSessionValue('serverPublicKey')\nconst challange = worker.decrypt(cryptogram, clientPrivateKey)\nconst encryptData = worker.encryptAndSign(\n  {\n    challengePass: challange\n  },\n  serverPublicKey,\n  clientPrivateKey\n)\npayerCard = await worker.findCardByName(cardAccounts, payerCardName)\nconst amount = await worker.randomAmount()\nresponse = await request(baseUrl)\n  .post('/payments/p2p/setInput')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    sign: encryptData.sign,\n    cryptogram: encryptData.cryptogram,\n    sessionGuid,\n    payerId: `cardNumber:${payerCard.cards[0].cardNumber}`,\n    recipientId: `cardNumber:${recipientCardNumber}`,\n    amount\n  })\nawait worker.setSessionValue('cryptogram', response.body.cryptogram)",
                  "err": {},
                  "uuid": "9a25c810-3553-47a6-b76e-98d024971f31",
                  "parentUUID": "0614c2e1-76a9-4707-bd0b-f38c38c3572a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Переказ з картки на картку GET /p2p/setInput should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "8ee17d1c-587e-4a21-93a4-fadb127036e6",
                  "parentUUID": "0614c2e1-76a9-4707-bd0b-f38c38c3572a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Переказ з картки на картку GET /p2p/setInput should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const schema = require('../json_schema/p2p_setInput.json')\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "d4e3e8ad-3c87-4d3f-94ad-07543a48ab99",
                  "parentUUID": "0614c2e1-76a9-4707-bd0b-f38c38c3572a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ee17d1c-587e-4a21-93a4-fadb127036e6",
                "d4e3e8ad-3c87-4d3f-94ad-07543a48ab99"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3692560c-1e16-4b9b-9c2d-bcb0f83b0f35",
              "title": "GET /p2p/commission",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation_Supertest/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"GET /p2p/commission\"",
                  "fullTitle": "Переказ з картки на картку GET /p2p/commission \"before all\" hook in \"GET /p2p/commission\"",
                  "timedOut": false,
                  "duration": 1041,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(20000)\nresponse = await request(baseUrl)\n  .get('/payments/p2p/commission')\n  .set('Authorization', `Bearer ${token}`)\n  .send()",
                  "err": {},
                  "uuid": "b9c74065-0d9f-4cb7-a8af-dbad3096bba2",
                  "parentUUID": "3692560c-1e16-4b9b-9c2d-bcb0f83b0f35",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Переказ з картки на картку GET /p2p/commission should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "aa03be2f-87b6-428d-86a4-6f7d66969ab9",
                  "parentUUID": "3692560c-1e16-4b9b-9c2d-bcb0f83b0f35",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Переказ з картки на картку GET /p2p/commission should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const schema = require('../json_schema/p2p_commission.json')\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "ccf9ecf2-c040-4a36-a402-577cd98a5cf6",
                  "parentUUID": "3692560c-1e16-4b9b-9c2d-bcb0f83b0f35",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aa03be2f-87b6-428d-86a4-6f7d66969ab9",
                "ccf9ecf2-c040-4a36-a402-577cd98a5cf6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d6439b42-ed76-4f8b-85c4-e1467f9031a2",
              "title": "GET /p2p/confirm",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation_Supertest/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"GET /p2p/confirm\"",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm \"before all\" hook in \"GET /p2p/confirm\"",
                  "timedOut": false,
                  "duration": 559,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(20000)\nconst cryptogram = await worker.getSessionValue('cryptogram')\nconst sessionGuid = await worker.getSessionValue('sessionGuid')\nconst serverPublicKey = await worker.getSessionValue('serverPublicKey')\nconst challange = worker.decrypt(cryptogram, clientPrivateKey)\nconst encryptData = worker.encryptAndSign(\n  {\n    challengePass: challange,\n    password\n  },\n  serverPublicKey,\n  clientPrivateKey\n)\nresponse = await request(baseUrl)\n  .post('/payments/p2p/confirm')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    sign: encryptData.sign,\n    cryptogram: encryptData.cryptogram,\n    sessionGuid\n  })\nawait worker.setSessionValue('cryptogram', response.body.cryptogram)",
                  "err": {},
                  "uuid": "1695a56b-a317-41c9-b962-0073a52d7a56",
                  "parentUUID": "d6439b42-ed76-4f8b-85c4-e1467f9031a2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "01eb1fd8-cc09-4c34-b866-0fb22ce5a659",
                  "parentUUID": "d6439b42-ed76-4f8b-85c4-e1467f9031a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const schema = require('../json_schema/p2p_confirm.json')\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "8a64368f-8951-489c-b2c5-26529274b6e9",
                  "parentUUID": "d6439b42-ed76-4f8b-85c4-e1467f9031a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct title (Переказ з картки на картку)",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm should have correct title (Переказ з картки на картку)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.body.operation.title).to.equal(\n  'Переказ з картки на картку'\n)",
                  "err": {},
                  "uuid": "4198fae5-1f9f-40a2-8f40-884d4e59ab38",
                  "parentUUID": "d6439b42-ed76-4f8b-85c4-e1467f9031a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct subtitle (Переказ з картки на картку)",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm should have correct subtitle (Переказ з картки на картку)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.body.operation.subtitle).to.equal(\n  'Переказ з картки на картку'\n)",
                  "err": {},
                  "uuid": "c95a7558-8aaa-4113-8ca1-8542bc0f8e3c",
                  "parentUUID": "d6439b42-ed76-4f8b-85c4-e1467f9031a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct status (processing)",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm should have correct status (processing)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.body.operation.status).to.equal('processing')",
                  "err": {},
                  "uuid": "74383d4a-a6a0-4f4f-b6e0-5b68169035d1",
                  "parentUUID": "d6439b42-ed76-4f8b-85c4-e1467f9031a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct dark icon URL",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm should have correct dark icon URL",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.body.operation.darkIcon).to.equal(\n  'https://content.vostok.bank/vostokApp/payment-history/categories/logos/TransferCard-Dark.png'\n)",
                  "err": {},
                  "uuid": "b67126bf-6e80-409d-b584-37b39fd892b8",
                  "parentUUID": "d6439b42-ed76-4f8b-85c4-e1467f9031a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should have correct light icon URL",
                  "fullTitle": "Переказ з картки на картку GET /p2p/confirm should have correct light icon URL",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.body.operation.lightIcon).to.equal(\n  'https://content.vostok.bank/vostokApp/payment-history/categories/logos/TransferCard-Light.png'\n)",
                  "err": {},
                  "uuid": "01005410-0787-4bfa-8fd4-4205968c5f2f",
                  "parentUUID": "d6439b42-ed76-4f8b-85c4-e1467f9031a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01eb1fd8-cc09-4c34-b866-0fb22ce5a659",
                "8a64368f-8951-489c-b2c5-26529274b6e9",
                "4198fae5-1f9f-40a2-8f40-884d4e59ab38",
                "c95a7558-8aaa-4113-8ca1-8542bc0f8e3c",
                "74383d4a-a6a0-4f4f-b6e0-5b68169035d1",
                "b67126bf-6e80-409d-b584-37b39fd892b8",
                "01005410-0787-4bfa-8fd4-4205968c5f2f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}
{
  "stats": {
    "suites": 5,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2024-04-07T08:44:36.905Z",
    "end": "2024-04-07T08:44:38.668Z",
    "duration": 1763,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "df5ddc99-ef64-4abb-8940-770a50fa1670",
      "title": "",
      "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
      "file": "/tests/auth.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b8b70f58-f2ef-45ee-a581-1a02f1200e0b",
          "title": "Авторизація",
          "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
          "file": "/tests/auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Авторизація\"",
              "fullTitle": "Авторизація \"before all\" hook in \"Авторизація\"",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "clientPublicKey = await worker.getSessionValue('clientPublicKey')\ndevice = await worker.getSessionValue('iosReleaseDevice')\n// device = await worker.getSessionValue('iosDebugDevice')",
              "err": {},
              "uuid": "b2677fdd-c301-4624-9131-08bfe3963c1c",
              "parentUUID": "b8b70f58-f2ef-45ee-a581-1a02f1200e0b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e46fa00d-d8ec-406b-a91d-5379a4cfbb00",
              "title": "POST /start",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /start\"",
                  "fullTitle": "Авторизація POST /start \"before all\" hook in \"POST /start\"",
                  "timedOut": false,
                  "duration": 227,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "response = await request(baseUrl).post('/auth/v3/start').send({\n  clientPublicKey,\n  phoneNumber,\n  device\n})\nconst token = response.body.token\nconst serverPublicKey = response.body.serverPublicKey\nconst cryptogram = response.body.cryptogram\nawait worker.setSessionValue('token', token)\nawait worker.setSessionValue('serverPublicKey', serverPublicKey)\nawait worker.setSessionValue('cryptogram', cryptogram)",
                  "err": {},
                  "uuid": "d796b037-63e7-44f3-b532-368ade61e435",
                  "parentUUID": "e46fa00d-d8ec-406b-a91d-5379a4cfbb00",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Авторизація POST /start should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "4ef4d311-3f9b-4337-ad28-0b4715402249",
                  "parentUUID": "e46fa00d-d8ec-406b-a91d-5379a4cfbb00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Авторизація POST /start should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const schema = {\n  type: 'object',\n  properties: {\n    serverPublicKey: { type: 'string' },\n    token: { type: 'string' },\n    sign: { type: 'string' },\n    cryptogram: { type: 'string' }\n  },\n  required: ['serverPublicKey', 'token', 'sign', 'cryptogram']\n}\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "1c67860c-c67b-4514-88da-6d8f57715608",
                  "parentUUID": "e46fa00d-d8ec-406b-a91d-5379a4cfbb00",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4ef4d311-3f9b-4337-ad28-0b4715402249",
                "1c67860c-c67b-4514-88da-6d8f57715608"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8bc0c0aa-56a5-4ff0-9e84-ffd3070e8f2d",
              "title": "POST /nextStep",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /nextStep\"",
                  "fullTitle": "Авторизація POST /nextStep \"before all\" hook in \"POST /nextStep\"",
                  "timedOut": false,
                  "duration": 672,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const token = await worker.getSessionValue('token')\nconst challange = await worker.decrypt_v2()\nconst encryptData = await worker.encryptAndSign_v2({\n  challengePass: challange\n})\nresponse = await request(baseUrl)\n  .post('/auth/v4/nextstep')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    sign: encryptData.sign,\n    cryptogram: encryptData.cryptogram\n  })\nawait worker.setSessionValue('cryptogram', response.body.cryptogram)\nawait worker.setSessionValue('nextStep', response.body.nextStep)",
                  "err": {},
                  "uuid": "4d4fa344-2887-46d0-9808-35c84b0708d6",
                  "parentUUID": "8bc0c0aa-56a5-4ff0-9e84-ffd3070e8f2d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Авторизація POST /nextStep should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "e89898e3-bce1-41c7-9afe-dc216cf64632",
                  "parentUUID": "8bc0c0aa-56a5-4ff0-9e84-ffd3070e8f2d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Авторизація POST /nextStep should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const schema = {\n  type: 'object',\n  properties: {\n    sign: { type: 'string' },\n    cryptogram: { type: 'string' }\n  },\n  required: ['sign', 'cryptogram']\n}\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "610db116-1b2d-47fa-88cf-9b4d07a57e38",
                  "parentUUID": "8bc0c0aa-56a5-4ff0-9e84-ffd3070e8f2d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e89898e3-bce1-41c7-9afe-dc216cf64632",
                "610db116-1b2d-47fa-88cf-9b4d07a57e38"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "33a3272a-180e-4664-936e-8bec197d8e05",
              "title": "POST /otp/confirm",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /otp/confirm\"",
                  "fullTitle": "Авторизація POST /otp/confirm \"before all\" hook in \"POST /otp/confirm\"",
                  "timedOut": false,
                  "duration": 409,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nextStep = await worker.getSessionValue('nextStep')\nif (nextStep !== 'requestOtp') {\n  return\n}\nconst token = await worker.getSessionValue('token')\nconst challange = await worker.decrypt_v2()\nconst encryptData = await worker.encryptAndSign_v2({\n  challengePass: challange,\n  otp\n})\nresponse = await request(baseUrl)\n  .post('/auth/v4/otp/confirm')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    sign: encryptData.sign,\n    cryptogram: encryptData.cryptogram\n  })\nawait worker.setSessionValue('cryptogram', response.body.cryptogram)\nawait worker.setSessionValue('nextStep', response.body.nextStep)",
                  "err": {},
                  "uuid": "de27ef48-17d3-469a-b58f-2de1805a0e21",
                  "parentUUID": "33a3272a-180e-4664-936e-8bec197d8e05",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Авторизація POST /otp/confirm should return 200 OK status code",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (!response) {\n  this.skip() // Пропустити виконання тесту\n}\nexpect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "04c9a7c0-610e-4314-ad5f-16762b183976",
                  "parentUUID": "33a3272a-180e-4664-936e-8bec197d8e05",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Авторизація POST /otp/confirm should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (!response) {\n  this.skip() // Пропустити виконання тесту\n}\nconst schema = {\n  type: 'object',\n  properties: {\n    sign: { type: 'string' },\n    cryptogram: { type: 'string' }\n  },\n  required: ['sign', 'cryptogram']\n}\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "fec76ab3-8ebb-44aa-a4e2-46b913e4d0da",
                  "parentUUID": "33a3272a-180e-4664-936e-8bec197d8e05",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "04c9a7c0-610e-4314-ad5f-16762b183976",
                "fec76ab3-8ebb-44aa-a4e2-46b913e4d0da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f85be40b-2bed-429b-8426-e575d36c622f",
              "title": "POST /enterpassword",
              "fullFile": "/Users/andriidydyk/Documents/BV_Automation/tests/auth.test.js",
              "file": "/tests/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /enterpassword\"",
                  "fullTitle": "Авторизація POST /enterpassword \"before all\" hook in \"POST /enterpassword\"",
                  "timedOut": false,
                  "duration": 415,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nextStep = await worker.getSessionValue('nextStep')\nif (nextStep !== 'enterPassword') {\n  return\n}\nconst token = await worker.getSessionValue('token')\nconst challange = await worker.decrypt_v2()\nconst encryptData = await worker.encryptAndSign_v2({\n  challengePass: challange,\n  password\n})\nresponse = await request(baseUrl)\n  .post('/auth/v3/enterpassword')\n  .set('Authorization', `Bearer ${token}`)\n  .send({\n    sign: encryptData.sign,\n    cryptogram: encryptData.cryptogram\n  })\nawait worker.setSessionValue('cryptogram', response.body.cryptogram)\nawait worker.setSessionValue('nextStep', response.body.nextStep)\nawait worker.setSessionValue('token', response.body.token)",
                  "err": {},
                  "uuid": "ee93d358-41d7-4c2c-a41e-7a238e1d0e93",
                  "parentUUID": "f85be40b-2bed-429b-8426-e575d36c622f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 200 OK status code",
                  "fullTitle": "Авторизація POST /enterpassword should return 200 OK status code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (!response) {\n  this.skip()\n}\nexpect(response.statusCode).to.equal(200)",
                  "err": {},
                  "uuid": "49265a4f-1126-4322-9c07-6e3e06b2dc2b",
                  "parentUUID": "f85be40b-2bed-429b-8426-e575d36c622f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should contain valid JSON schema",
                  "fullTitle": "Авторизація POST /enterpassword should contain valid JSON schema",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "if (!response) {\n  this.skip()\n}\nconst schema = {\n  type: 'object',\n  properties: {\n    token: { type: 'string' },\n    name: { type: 'string' },\n    email: { type: 'string' },\n    nextStep: { type: 'string' },\n    sign: { type: 'string' },\n    cryptogram: { type: 'string' }\n  },\n  required: ['token', 'name', 'email', 'nextStep', 'sign', 'cryptogram']\n}\nconst valid = ajv.validate(schema, response.body)\nif (!valid) {\n  console.error('Data does not match JSON schema:', ajv.errorsText())\n  console.error(response.body)\n}\nexpect(valid).to.be.true",
                  "err": {},
                  "uuid": "82c6029f-41c2-42fb-8c1e-32910343b02f",
                  "parentUUID": "f85be40b-2bed-429b-8426-e575d36c622f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "49265a4f-1126-4322-9c07-6e3e06b2dc2b",
                "82c6029f-41c2-42fb-8c1e-32910343b02f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}